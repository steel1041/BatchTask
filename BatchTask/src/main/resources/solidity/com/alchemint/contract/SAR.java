package com.alchemint.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class SAR extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_SDUSD = "sdusd";

    public static final String FUNC_ERA = "era";

    public static final String FUNC_LASTHEIGHT = "lastHeight";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_BONDDRAWED = "bondDrawed";

    public static final String FUNC_BONDLOCKED = "bondLocked";

    public static final String FUNC_SETSDUSD = "setSDUSD";

    public static final String FUNC_CLOSE = "close";

    public static final String FUNC_OFF = "off";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_BONDSTATUS = "bondStatus";

    public static final String FUNC_FEE = "fee";

    public static final String FUNC_HASDRAWED = "hasDrawed";

    public static final String FUNC_BONDGLOBAL = "bondGlobal";

    public static final String FUNC_EXPANDE = "expande";

    public static final String FUNC_RESCUE = "rescue";

    public static final String FUNC_SETORACLE = "setOracle";

    public static final String FUNC_SETH = "seth";

    public static final String FUNC_ORACLE = "oracle";

    public static final String FUNC_RESERVE = "reserve";

    public static final String FUNC_SARS = "sars";

    public static final String FUNC_SARSTATUS = "sarStatus";

    public static final String FUNC_CONTR = "contr";

    public static final String FUNC_LOCKED = "locked";

    public static final String FUNC_RESCUET = "rescueT";

    public static final String FUNC_SETOFFSTATUS = "setOffStatus";

    public static final String FUNC_SETBOND = "setBond";

    public static final String FUNC_SETSETH = "setSETH";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAWT = "withdrawT";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_OPEN = "open";

    public static final Event OPERATED_EVENT = new Event("Operated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OPERATEDFEE_EVENT = new Event("Operatedfee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SAR(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SAR(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SAR(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SAR(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> sdusd() {
        final Function function = new Function(FUNC_SDUSD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> era() {
        final Function function = new Function(FUNC_ERA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> lastHeight(String addr) {
        final Function function = new Function(FUNC_LASTHEIGHT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger mount) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> bondDrawed(String addr) {
        final Function function = new Function(FUNC_BONDDRAWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> bondLocked(String addr) {
        final Function function = new Function(FUNC_BONDLOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setSDUSD(String sdusd_) {
        final Function function = new Function(
                FUNC_SETSDUSD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(sdusd_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> close() {
        final Function function = new Function(
                FUNC_CLOSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> off() {
        final Function function = new Function(FUNC_OFF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> owner(String addr) {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> bondStatus(String param0) {
        final Function function = new Function(FUNC_BONDSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> fee(String addr) {
        final Function function = new Function(FUNC_FEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> hasDrawed(String addr) {
        final Function function = new Function(FUNC_HASDRAWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> bondGlobal() {
        final Function function = new Function(FUNC_BONDGLOBAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> expande(BigInteger wad) {
        final Function function = new Function(
                FUNC_EXPANDE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rescue(String dest, BigInteger wad) {
        final Function function = new Function(
                FUNC_RESCUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(dest), 
                new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setOracle(String oracle_) {
        final Function function = new Function(
                FUNC_SETORACLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(oracle_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> seth() {
        final Function function = new Function(FUNC_SETH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> oracle() {
        final Function function = new Function(FUNC_ORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> reserve(BigInteger wad) {
        final Function function = new Function(
                FUNC_RESERVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> sars(String param0) {
        final Function function = new Function(FUNC_SARS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> sarStatus(String param0) {
        final Function function = new Function(FUNC_SARSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> contr(BigInteger wad) {
        final Function function = new Function(
                FUNC_CONTR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> locked(String addr) {
        final Function function = new Function(FUNC_LOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> rescueT(BigInteger bondMount) {
        final Function function = new Function(
                FUNC_RESCUET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bondMount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setOffStatus(Boolean status) {
        final Function function = new Function(
                FUNC_SETOFFSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBond(String src, Boolean status) {
        final Function function = new Function(
                FUNC_SETBOND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(src), 
                new org.web3j.abi.datatypes.Bool(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSETH(String seth_) {
        final Function function = new Function(
                FUNC_SETSETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seth_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newAdmin) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawT(BigInteger mount) {
        final Function function = new Function(
                FUNC_WITHDRAWT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> open() {
        final Function function = new Function(
                FUNC_OPEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<OperatedEventResponse> getOperatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATED_EVENT, transactionReceipt);
        ArrayList<OperatedEventResponse> responses = new ArrayList<OperatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatedEventResponse typedResponse = new OperatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.opType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.opValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OperatedEventResponse> operatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OperatedEventResponse>() {
            @Override
            public OperatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATED_EVENT, log);
                OperatedEventResponse typedResponse = new OperatedEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.opType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.opValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OperatedEventResponse> operatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATED_EVENT));
        return operatedEventFlowable(filter);
    }

    public List<OperatedfeeEventResponse> getOperatedfeeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OPERATEDFEE_EVENT, transactionReceipt);
        ArrayList<OperatedfeeEventResponse> responses = new ArrayList<OperatedfeeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OperatedfeeEventResponse typedResponse = new OperatedfeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OperatedfeeEventResponse> operatedfeeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OperatedfeeEventResponse>() {
            @Override
            public OperatedfeeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OPERATEDFEE_EVENT, log);
                OperatedfeeEventResponse typedResponse = new OperatedfeeEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OperatedfeeEventResponse> operatedfeeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OPERATEDFEE_EVENT));
        return operatedfeeEventFlowable(filter);
    }

    @Deprecated
    public static SAR load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SAR(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SAR load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SAR(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SAR load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SAR(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SAR load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SAR(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SAR> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String seth_, String sdusd_, String oracle_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seth_), 
                new org.web3j.abi.datatypes.Address(sdusd_), 
                new org.web3j.abi.datatypes.Address(oracle_)));
        return deployRemoteCall(SAR.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SAR> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String seth_, String sdusd_, String oracle_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seth_), 
                new org.web3j.abi.datatypes.Address(sdusd_), 
                new org.web3j.abi.datatypes.Address(oracle_)));
        return deployRemoteCall(SAR.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SAR> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String seth_, String sdusd_, String oracle_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seth_), 
                new org.web3j.abi.datatypes.Address(sdusd_), 
                new org.web3j.abi.datatypes.Address(oracle_)));
        return deployRemoteCall(SAR.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SAR> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String seth_, String sdusd_, String oracle_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seth_), 
                new org.web3j.abi.datatypes.Address(sdusd_), 
                new org.web3j.abi.datatypes.Address(oracle_)));
        return deployRemoteCall(SAR.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OperatedEventResponse {
        public Log log;

        public String from;

        public BigInteger opType;

        public BigInteger opValue;
    }

    public static class OperatedfeeEventResponse {
        public Log log;

        public String from;

        public BigInteger fee;
    }
}
